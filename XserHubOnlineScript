local Fluent = loadstring(game:HttpGet("https://raw.githubusercontent.com/ScriptInfinityHub/mainui/main/FlusentGUI"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Xser V1.0 | ",
    SubTitle = "by Infinity Hub",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "cloud-sun" }),
    Home = Window:AddTab({ Title = "Home", Icon = "home" }),
    Tap3 = Window:AddTab({ Title = "Teleport", Icon = "wind" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

do
    Fluent:Notify({
        Title = "Notification",
        Content = "This is a notification",
        SubContent = "SubContent", -- Optional
        Duration = 5 -- Set to nil to make the notification not disappear
    })

local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "l", Default = false })

    Toggle:OnChanged(function()
        print("Toggle changed:", Options.MyToggle.Value)
    end)

    Options.MyToggle:SetValue(false)


    Tabs.Main:AddParagraph({
        Title = "Paragraph",
        Content = "This is a paragraph.\nSecond line!"
    })



    Tabs.Main:AddButton({
        Title = "Button",
        Description = "Very important button",
        Callback = function()
            Window:Dialog({
                Title = "Title",
                Content = "This is a dialog",
                Buttons = {
                    {
                        Title = "Confirm",
                        Callback = function()
                            print("Confirmed the dialog.")
                        end
                    },
                    {
                        Title = "Cancel",
                        Callback = function()
                            print("Cancelled the dialog.")
                        end
                    }
                }
            })
        end
    })



    local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Toggle", Default = false })

    Toggle:OnChanged(function()
        print("Toggle changed:", Options.MyToggle.Value)
    end)

    Options.MyToggle:SetValue(false)


    
    local Slider = Tabs.Main:AddSlider("Slider", {
        Title = "Slider",
        Description = "This is a slider",
        Default = 2,
        Min = 0,
        Max = 5,
        Rounding = 1,
        Callback = function(Value)
            print("Slider was changed:", Value)
        end
    })

    Slider:OnChanged(function(Value)
        print("Slider changed:", Value)
    end)

    Slider:SetValue(3)



    local Dropdown = Tabs.Main:AddDropdown("Dropdown", {
        Title = "Dropdown",
        Values = {"one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen"},
        Multi = false,
        Default = 1,
    })

    Dropdown:SetValue("four")

    Dropdown:OnChanged(function(Value)
        print("Dropdown changed:", Value)
    end)


    
    local MultiDropdown = Tabs.Main:AddDropdown("MultiDropdown", {
        Title = "Dropdown",
        Description = "You can select multiple values.",
        Values = {"one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen"},
        Multi = true,
        Default = {"seven", "twelve"},
    })

    MultiDropdown:SetValue({
        three = true,
        five = true,
        seven = false
    })

    MultiDropdown:OnChanged(function(Value)
        local Values = {}
        for Value, State in next, Value do
            table.insert(Values, Value)
        end
        print("Mutlidropdown changed:", table.concat(Values, ", "))
    end)



    local Colorpicker = Tabs.Main:AddColorpicker("Colorpicker", {
        Title = "Colorpicker",
        Default = Color3.fromRGB(96, 205, 255)
    })

    Colorpicker:OnChanged(function()
        print("Colorpicker changed:", Colorpicker.Value)
    end)
    
    Colorpicker:SetValueRGB(Color3.fromRGB(0, 255, 140))



    local TColorpicker = Tabs.Main:AddColorpicker("TransparencyColorpicker", {
        Title = "Colorpicker",
        Description = "but you can change the transparency.",
        Transparency = 0,
        Default = Color3.fromRGB(96, 205, 255)
    })

    TColorpicker:OnChanged(function()
        print(
            "TColorpicker changed:", TColorpicker.Value,
            "Transparency:", TColorpicker.Transparency
        )
    end)



    local Keybind = Tabs.Main:AddKeybind("Keybind", {
        Title = "KeyBind",
        Mode = "Toggle", -- Always, Toggle, Hold
        Default = "LeftControl", -- String as the name of the keybind (MB1, MB2 for mouse buttons)

        -- Occurs when the keybind is clicked, Value is `true`/`false`
        Callback = function(Value)
            print("Keybind clicked!", Value)
        end,

        -- Occurs when the keybind itself is changed, `New` is a KeyCode Enum OR a UserInputType Enum
        ChangedCallback = function(New)
            print("Keybind changed!", New)
        end
    })

    -- OnClick is only fired when you press the keybind and the mode is Toggle
    -- Otherwise, you will have to use Keybind:GetState()
    Keybind:OnClick(function()
        print("Keybind clicked:", Keybind:GetState())
    end)

    Keybind:OnChanged(function()
        print("Keybind changed:", Keybind.Value)
    end)

    task.spawn(function()
        while true do
            wait(1)

            -- example for checking if a keybind is being pressed
            local state = Keybind:GetState()
            if state then
                print("Keybind is being held down")
            end

            if Fluent.Unloaded then break end
        end
    end)

    Keybind:SetValue("MB2", "Toggle") -- Sets keybind to MB2, mode to Hold


    local Input = Tabs.Main:AddInput("Input", {
        Title = "Input",
        Default = "Default",
        Placeholder = "Placeholder",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(Value)
            print("Input changed:", Value)
        end
    })

    Input:OnChanged(function()
        print("Input updated:", Input.Value)
    end)
end

--Home

local secFarm = Tabs.Home:AddSection("Type | Farm")

local player = game.Players.LocalPlayer
local backpack = player.Backpack

local Weaponlist = {}

-- Function to update Weaponlist
local function updateWeaponlist()
    Weaponlist = {}
    for _, tool in ipairs(backpack:GetChildren()) do
        if tool:IsA("Tool") then
            table.insert(Weaponlist, tool.Name)
        end
    end
end

-- Initial update
updateWeaponlist()

-- Listen for tool added and removed events
backpack.ChildAdded:Connect(updateWeaponlist)
backpack.ChildRemoved:Connect(updateWeaponlist)

-- Create dropdown
local Dropdown = secFarm:AddDropdown("ToolDropdown", {
    Title = "Select Tool",
    Values = Weaponlist,
    Multi = false,
    Default = "...",
})

Dropdown:SetValue("...")

local Weapon = ""

Dropdown:OnChanged(function(items)
    Weapon = items[1]
end)

local Toggle = secFarm:AddToggle("ToggleTool", {Title = "Equip Tool", Default = false })

Toggle:OnChanged(function(Eq)
    _G.Equip = Eq
    if _G.Equip then
        pcall(function()
            local tool = player.Backpack:FindFirstChild(Weapon)
            if tool then
                player.Character.Humanoid:EquipTool(tool)
            end
        end)
    end
end)

-- Set the initial value of the toggle
Toggle:SetValue(false)


local monInfo = {
    {level = 1, levelMax = 9, mon = "Pirate", cFrameMob = CFrame.new(1059.37195, 15.4495068, 1550.4231, 0.939700544, -0, -0.341998369, 0, 1, -0, 0.341998369, 0, 0.939700544)},
    {level = 1, levelMax = 9, mon = "Pirate", cFrameMob = CFrame.new(1059.37195, 15.4495068, 1550.4231, 0.939700544, -0, -0.341998369, 0, 1, -0, 0.341998369, 0, 0.939700544)},
    {level = 1, levelMax = 9, mon = "Pirate", cFrameMob = CFrame.new(1059.37195, 15.4495068, 1550.4231, 0.939700544, -0, -0.341998369, 0, 1, -0, 0.341998369, 0, 0.939700544)},
    -- add more level ranges here
}
-- local function TptoTarget(Target)
--     local plr = game.Players.LocalPlayer
--     local rootpart = plr:FindFirstChild("HumanoidRootPart")
--     if rootpart then
--         rootpart.CFrame = Target
--     end
-- end
local Toggle = secFarm:AddToggle("ToggleFarm", {Title = "Auto Farm", Default = false })

Toggle:OnChanged(function(Af)
    _G.AutoFarm = Af
    while wait() do
        if _G.AutoFarm then
            pcall(function()
                -- for i,v in pairs(game:GetService("Workspace")["_Mob"]:GetChildren()) do
                --     if v.Name == monInfo.mon then
                --         if v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") then
                --             if v.Humanoid.Health > 0 then
                --         repeat
                --             task.wait()
                --             v.HumanoidRootPart.Size = Vector3.new(30,30,30)
                --             v.HumanoidRootPart.Transparency = 0.3
                --             if v.HumanoidRootPart.CanCollide == true then
                --                 v.HumanoidRootPart.CanCollide = false
                --             end
                --             -- TptoTarget(v.HumanoidRootPart.CFrame * CFrame.new(0,4,0))
                --         until v.Humanoid.Health == 0 or v.Humanoid.Health <= 0
                --             end
                --         end
                --     end
                -- end
            end)
        end
    end

end)

Options.MyToggle:SetValue(false)


--Teleport

local secTpPlayer = Tabs.Tap3:AddSection("Teleport to Player")

local Plr = {}

local Dropdown = secTpPlayer:AddDropdown("TeleportDropdown", {
    Title = "Select Players",
    Values =  Plr,
    Multi = false,
    Default = "...",
})

Dropdown:SetValue("...")

Dropdown:OnChanged(function(Player)
    PlayerTP = Player
end)

function Dropdown:SetValues(NewValues, PlayerNames)
    if NewValues then
        self.Values = NewValues
    end

    local Names = {}
    for _, name in ipairs(PlayerNames) do
        table.insert(Names, name)
    end
    self.Values = Names

    self:BuildDropdownList()
end

local function updatePlr()
    Plr = {}
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer then
            table.insert(Plr, player.Name)
        end
    end
    Dropdown:SetValues(nil, Plr) -- Update the dropdown when the player list changes
end

-- Update the Plr table when a player joins or leaves the game
game.Players.PlayerAdded:Connect(updatePlr)
game.Players.PlayerRemoving:Connect(updatePlr)

-- Initial update
updatePlr()

local secdirection = Tabs.Tap3:AddSection("Direction (Teleport to Player)")

local SliderX = secdirection:AddSlider("XSlider", {
    Title = "X",
    Description = "Right side, Left side",
    Default = 0,
    Min = -10,
    Max = 10,
    Rounding = 1,
    Callback = function(Gx)
        x = Gx
    end
})
local SliderY = secdirection:AddSlider("YSlider", {
    Title = "Y",
    Description = "Above, Below",
    Default = 0,
    Min = -10,
    Max = 10,
    Rounding = 1,
    Callback = function(Gy)
        y = Gy
    end
})
local SliderZ = secdirection:AddSlider("ZSlider", {
    Title = "Z",
    Description = "Front, Back",
    Default = 0,
    Min = -10,
    Max = 10,
    Rounding = 1,
    Callback = function(Gz)
        z = Gz
    end
})

local secADdirection = Tabs.Tap3:AddSection("Advance direction (Teleport to Player)")

local SliderAdX = secADdirection:AddSlider("AXSlider", {
    Title = "AdX",
    Description = "Right side, Left side",
    Default = 12,
    Min = -15,
    Max = 15,
    Rounding = 1,
    Callback = function(Gx)
        Ax = Gx
    end
})
local SliderAdY = secADdirection:AddSlider("AYSlider", {
    Title = "AdY",
    Description = "Tilt forward, Tilt back",
    Default = 0,
    Min = -25,
    Max = 25,
    Rounding = 1,
    Callback = function(Gy)
        Ay = Gy
    end
})
local SliderAdZ = secADdirection:AddSlider("AZSlider", {
    Title = "AdZ",
    Description = "",
    Default = 0,
    Min = -10,
    Max = 10,
    Rounding = 1,
    Callback = function(Gz)
        Az = Gz
    end
})

local center = Tabs.Tap3:AddSection(" ")
local SliderAdC = center:AddSlider("cSlider", {
    Title = "AdC",
    Description = "Center",
    Default = 0,
    Min = -25,
    Max = 25,
    Rounding = 1,
    Callback = function(Gx)
        Adc = Gx
    end
})

center:AddButton({
        Title = "Change Setting to Default",
        Description = "The value change to Default",
        Callback = function()
            Window:Dialog({
                Title = "Do you want to change?",
                Content = "The value change to Default",
                Buttons = {
                    {
                        Title = "Confirm",
                        Callback = function()
                            SliderX:SetValue(0)
                            SliderY:SetValue(0)
                            SliderZ:SetValue(0)
                            SliderAdX:SetValue(12)
                            SliderAdY:SetValue(0)
                            SliderAdZ:SetValue(0)
                            SliderAdC:SetValue(0)
                        end
                    },
                    {
                        Title = "Cancel",
                        Callback = function()
                            print("Cancelled the dialog.")
                        end
                    }
                }
            })
        end
    })


local Toggle = secTpPlayer:AddToggle("TpPlayerToggle", {Title = "Teleport to Player", Default = false })
Toggle:OnChanged(function(Run)
    _G.TpPlayer = Run
    while _G.TpPlayer do
        task.wait()
        pcall(function()
            local me = game.Players.LocalPlayer.Character
            local targetPlayer = game.Players:FindFirstChild(PlayerTP)
            if targetPlayer then
                local targetCharacter = targetPlayer.Character
                if targetCharacter then
                    local targetHumanoidRootPart = targetCharacter:FindFirstChild("HumanoidRootPart")
                    if targetHumanoidRootPart then
                        me:FindFirstChild("HumanoidRootPart").CFrame = targetHumanoidRootPart.CFrame * CFrame.new(x,y,z,Adc,Ax,Ay,Ay)
                    else
                        warn("Target player has no HumanoidRootPart")
                    end
                else
                    warn("Target player has no character")
                end
            else
                warn("Target player not found")
            end
        end)
    end
end)
Options.TpPlayerToggle:SetValue(false)



-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- InterfaceManager (Allows you to have a interface managment system)

-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)


Window:SelectTab(1)

Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
})

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
